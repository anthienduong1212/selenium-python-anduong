{"name": "test_homepage[browser=firefox]", "status": "failed", "statusDetails": {"message": "core.waiter.wait.TimeoutErrorWithScreenShot: Timeout after 0.800s (polls=4): Element(\"xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\") should: click_ready. Last state: text=\"\", enabled=True, displayed=True. Locator=xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\nScreenshot: reports/screenshots\\20251026_230341_127795.png", "trace": "self = <core.element.elements.Element object at 0x0000029E99C43E20>\n\n    def click(self) -> \"Element\":\n        self.should(cond_visible())\n        self.scroll_into_view()\n        try:\n>           self._resolve().click()\n\ncore\\element\\elements.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029E99C42380>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"a8780-box ...origin=https%3A%2F%2Fwww.agoda.com&oauth2_auth_url=https%3A%2F%2Faccounts.google.com%2Fo%2Foauth2%2Fv2%2Fauth\\\\\">\"}}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"a8780-box a8780-bg-generic-base-surface a8780-fill-inherit a8780-text-inherit a8780-cursor-pointer a8780-p-0  a8780-rounded-max a8780-border-0   \" type=\"button\"> is not clickable at point (1288,144) because another element <iframe class=\"L5Fo6c-PQbLGe\" src=\"https://accounts.google.com/gsi/iframe/select?client_id=526749710507-llgn40roke6dfrsi0f31mek6qqmm05g3.apps.googleusercontent.com&ux_mode=popup&ui_mode=card&as=gRNlHFSfOnFvnYxPWurDPvPpiIK9_uRdC8RVsVI7NQU&is_itp=true&channel_id=a5008f0909ced707846dfbf80399924dcb48157f84b66956f4e31fc0a024897a&origin=https%3A%2F%2Fwww.agoda.com&oauth2_auth_url=https%3A%2F%2Faccounts.google.com%2Fo%2Foauth2%2Fv2%2Fauth\"> obscures it; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:202:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:354:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:175:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:134:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:327:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:210:31\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"7d6b1f55-5ab3-4ff4-a2b2-76212ba3a0b4\")>\notp_mailbox = {'email': '27d61120-f28f-4c77-b3eb-4e471d8db789@mailslurp.biz', 'inbox_id': '27d61120-f28f-4c77-b3eb-4e471d8db789', 'ms': <core.utils.slurp_mail_utils.SlurpMailUtil object at 0x0000029E99C43100>}\n\n    def test_homepage(driver, otp_mailbox):\n    \n        home_page = HomePage()\n        result_page = ResultPage()\n        hotel_detail_page = HotelDetails()\n        login_page = LoginPage()\n    \n        home_page.open(\"https://www.agoda.com\")\n    \n        home_page.enter_text_in_autocomplete(\"Dalat\")\n        home_page.select_auto_suggest_item(\"Dalat\")\n        home_page.select_booking_date(\"2025-11-01\", \"2025-11-30\")\n        home_page.enter_number_of_occupancy(OccupancyType.OCCUPANCY_ADULTS, 2)\n        home_page.click_search()\n    \n        result_page.verify_top_n_hotels_are_in_city(5, \"Dalat\")\n        result_page.search_filter_with_term(\"RoomOffers\", \"Breakfast included\")\n        result_page.select_first_hotel()\n    \n        # hotel_detail_page.select_navbar_option(NavbarOptions.ROOMS)\n        # assert hotel_detail_page.is_option_display(\"Breakfast included\"), \"Hotel doesn't contain this option\"\n    \n>       hotel_detail_page.add_to_favorites()\n\ntests\\smoke\\test_booking.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\agoda\\hotel_details.py:39: in add_to_favorites\n    self.el(self.BTN_ADD_TO_FAVORITES).should(cond_visible()).click()\ncore\\element\\elements.py:175: in click\n    self.should(click_ready(), timeout_ms=max(500, self.config.polling_interval_ms * 4))\ncore\\element\\elements.py:310: in should\n    self.waiter.until(_supplier, _on_timeout, _shot)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <core.waiter.wait.Waiter object at 0x0000029E99CA8130>, supplier = <function Element.should.<locals>._supplier at 0x0000029E99C5A950>\non_timeout = <function Element.should.<locals>._on_timeout at 0x0000029E99C5AA70>, take_screenshot = <function Element.should.<locals>._shot at 0x0000029E99C5AB00>\nignored_exceptions = (<class 'selenium.common.exceptions.NoSuchElementException'>, <class 'selenium.common.exceptions.StaleElementReferenceException'>)\n\n    def until(self,\n              supplier: Callable[[], T],\n              on_timeout: Callable[[], str],\n              take_screenshot: Optional[Callable[[str], bool]] = None,\n              ignored_exceptions: Optional[Iterable[Type[BaseException]]] = (\n                      NoSuchElementException,\n                      StaleElementReferenceException),\n              ) -> T:\n    \n        end = time.time() + max(0.0, self.timeout_s)\n        last_exc: Optional[BaseException] = None\n        polls = 0\n    \n        while True:\n            try:\n                polls += 1\n                value = supplier()\n                if value:  # Return if truthy\n                    return value\n            except BaseException as e:\n                # Just ignore temporary exception\n                if ignored_exceptions and isinstance(e, tuple(ignored_exceptions)):\n                    last_exc = e\n                else:\n                    raise\n    \n            # Check timeout after each poll\n            if time.time() >= end:\n                break\n            time.sleep(self.poll_s)\n    \n        # Try to take screenshot (Handle availability)\n        screenshot_path = None\n        if take_screenshot:\n            os.makedirs(self.screen_dir, exist_ok=True)\n            name = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S_%f\") + \".png\"\n            path = os.path.join(self.screen_dir, name)\n    \n            try:\n                ok = take_screenshot(path)\n                if ok:\n                    screenshot_path = path\n            except WebDriverException:\n                pass\n    \n        # On timeout handle\n        detail = on_timeout()\n        elapsed = max(0.0, self.timeout_s)\n    \n        msg = f\"Timeout after {elapsed:.3f}s (polls={polls}): {detail}\"\n    \n        if last_exc:\n            msg += f\"\\nLast error: {type(last_exc).__name__}: {last_exc}\"\n        if screenshot_path:\n            msg += f\"\\nScreenshot: {screenshot_path}\"\n    \n>       raise TimeoutErrorWithScreenShot(msg, screenshot_path=screenshot_path)\nE       core.waiter.wait.TimeoutErrorWithScreenShot: Timeout after 0.800s (polls=4): Element(\"xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\") should: click_ready. Last state: text=\"\", enabled=True, displayed=True. Locator=xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\nE       Screenshot: reports/screenshots\\20251026_230341_127795.png\n\ncore\\waiter\\wait.py:84: TimeoutErrorWithScreenShot"}, "steps": [{"name": "Element(\"HOME_PAGE Search box\") should: visible", "status": "passed", "start": 1761494597652, "stop": 1761494598543}, {"name": "Element(\"HOME_PAGE Auto suggest\") should: visible", "status": "passed", "start": 1761494599358, "stop": 1761494599800}, {"name": "Element(\"HOME_PAGE Month Label[1]\") should: visible", "status": "passed", "start": 1761494600316, "stop": 1761494600338}, {"name": "Element(\"xpath=//div[contains(@class,\"DayPicker-Caption\")]\") should: visible", "status": "passed", "start": 1761494600338, "stop": 1761494600358}, {"name": "Element(\"xpath=//div[@id=\"DatePicker__AccessibleV2\"]\") should: visible", "status": "passed", "start": 1761494600378, "stop": 1761494600400}, {"name": "Element(\"HOME_PAGE Date Picker\") should: visible", "status": "passed", "start": 1761494600409, "stop": 1761494600429}, {"name": "Element(\"HOME_PAGE Month Label[1]\") should: visible", "status": "passed", "start": 1761494600756, "stop": 1761494600795}, {"name": "Element(\"xpath=//div[contains(@class,\"DayPicker-Caption\")]\") should: visible", "status": "passed", "start": 1761494600795, "stop": 1761494600918}, {"name": "Element(\"xpath=//div[@id=\"DatePicker__AccessibleV2\"]\") should: visible", "status": "passed", "start": 1761494600958, "stop": 1761494600972}, {"name": "Element(\"HOME_PAGE Date Picker\") should: visible", "status": "passed", "start": 1761494600978, "stop": 1761494600995}, {"name": "Element(\"HOME_PAGE Occupancy Selector\") should: visible", "status": "passed", "start": 1761494601183, "stop": 1761494601260}, {"name": "Element(\"HOME_PAGE Search Button\") should: visible", "status": "passed", "start": 1761494601284, "stop": 1761494601292}, {"name": "Element(\"HOME_PAGE Search Button\") should: visible", "status": "passed", "start": 1761494601306, "stop": 1761494601316}, {"name": "new_window_is_opened", "status": "passed", "start": 1761494607626, "stop": 1761494607637}, {"name": "switch_back_to(7472e2bf-c0c6-499f-860f-6cfa95e03312)", "status": "passed", "start": 1761494607658, "stop": 1761494607675}, {"name": "document.readyState == 'complete'", "status": "passed", "start": 1761494607675, "stop": 1761494609997}, {"name": "Element(\"xpath=//legend[contains(@id,'RoomOffers')]/following-sibling::ul\") should: visible", "status": "passed", "start": 1761494612541, "stop": 1761494612561}, {"name": "Element(\"xpath=//div[.//span[normalize-space(.)='Breakfast included']]/preceding-sibling::div//input\") should: visible", "status": "passed", "start": 1761494612562, "stop": 1761494612586}, {"name": "force_same_tab_links()", "status": "passed", "start": 1761494613098, "stop": 1761494613121}, {"name": "Element(\"Hotel Result Information[0]\") should: visible", "status": "passed", "start": 1761494613122, "stop": 1761494613148}, {"name": "Element(\"xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\") should: visible", "status": "passed", "start": 1761494617076, "stop": 1761494619119}, {"name": "Element(\"xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\") should: visible", "status": "passed", "start": 1761494619119, "stop": 1761494619448}, {"name": "Element(\"xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\") should: click_ready", "status": "failed", "statusDetails": {"message": "core.waiter.wait.TimeoutErrorWithScreenShot: Timeout after 0.800s (polls=4): Element(\"xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\") should: click_ready. Last state: text=\"\", enabled=True, displayed=True. Locator=xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']\nScreenshot: reports/screenshots\\20251026_230341_127795.png\n", "trace": "  File \"C:\\Users\\baon2\\IdeaProjects\\Selenium_Python\\selenium-python-anduong\\core\\report\\reporting.py\", line 52, in step\n    yield\n  File \"C:\\Users\\baon2\\IdeaProjects\\Selenium_Python\\selenium-python-anduong\\core\\element\\elements.py\", line 310, in should\n    self.waiter.until(_supplier, _on_timeout, _shot)\n  File \"C:\\Users\\baon2\\IdeaProjects\\Selenium_Python\\selenium-python-anduong\\core\\waiter\\wait.py\", line 84, in until\n    raise TimeoutErrorWithScreenShot(msg, screenshot_path=screenshot_path)\n"}, "attachments": [{"name": "FAILED - xpath=//div[@data-element-name='hotel-mosaic']//button[@data-selenium='favorite-heart']", "source": "bcd951bc-1fd7-4231-b141-bec434b2e4f1-attachment.attach", "type": "image/png"}, {"name": "Locator", "source": "4eb20b97-29ba-4c08-8d8f-5c090caca86e-attachment.txt", "type": "text/plain"}], "start": 1761494619973, "stop": 1761494621568}], "attachments": [{"name": "test_homepage[browser=firefox] - failed", "source": "39381b8b-4fd8-45f8-b4a6-90d4c37b33d9-attachment.png", "type": "image/png"}], "parameters": [{"name": "browser_name", "value": "'firefox'"}], "start": 1761494592319, "stop": 1761494621676, "uuid": "49c9ce57-0b1a-4fd2-b3f1-de6f285a5628", "historyId": "363e678f0954da4a0c1434ef9a3e626e", "testCaseId": "eb56874abd49a83ec2a3c33a8631836c", "fullName": "tests.smoke.test_booking#test_homepage", "labels": [{"name": "parentSuite", "value": "tests.smoke"}, {"name": "suite", "value": "test_booking"}, {"name": "host", "value": "DELL_G3_3590"}, {"name": "thread", "value": "19196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.smoke.test_booking"}], "titlePath": ["tests", "smoke", "test_booking.py"]}